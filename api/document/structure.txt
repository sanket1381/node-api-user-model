naming convention: for files inside api camel case,folders are in small letters
                   for variables camel case
                   validation_error and validation_msg var
Folder structure: 
        folders names should be small letters
        
          api: In this folder the whole codes folders and files should be added

Root folder of project includes folders and files like:

        ├── projectname
                       ├── node_modules
                       ├── gitignore
                       ├── index.js
                       ├── package.json
                       ├── api
                             ├── routes
                             │   ├── userRoutes.js
                             │   ├── productRoutes.js
                             │   └── orderRoutes.js
                             ├── controllers
                             │   ├── userController.js
                             │   ├── productController.js
                             │   └── orderController.js
                             ├── middlewares
                             │   ├── authenticationMiddleware.js
                             ├── services
                             │   ├── userService.js
                             │   ├── productService.js
                             │   └── orderService.js
                             ├── models
                             │   ├── userModel.js
                             │   ├── productModel.js
                             │   └── orderModel.js
                             ├── utils
                             │   ├── logger.js
                             │   ├── validator.js
                             │   └── helper.js
                             ├── .env
                             ├── routes.js
                             ├── common.js
                             └── dbconfig.js

 files : these files name should be in small case 
          1..gitignore
          2.index.js : where actual project entry point
          3.package.json : it is mete data file includes dependencies, scripts, and other project configurations,
                           project name, version, description, entry point, dependencies, devDependencies, scripts, author, license
          4.package-lock.json : it is a file automatically generated by npm or Yarn when installing or updating dependencies in a project
                                It provides a detailed, deterministic, and platform-independent description of the exact dependency tree generated during the installation process.

 folders :
           1.api :  follow camel case naming convention

                   files: 
                         1. .env: npm install dotenv to include .env file
                                  The .env file is a configuration file used in many applications to store environment-specific 
                                  variables or settings. It is typically used to define environment variables that can be accessed within the application code.
                                  variables stored inside env file should be capital letters and word sapareted by _
                                  e.g.MONGODB_URL
                         2.routes.js : This file contains the common routes for all requests.
                                       e.g. app.use('/api/user', loginRoutes); 
                                       function is used to mount the loginRoutes middleware function on the specified path /api/user
                                       incoming requests with a URL path starting with /api/user will be matched by 'loginRoutes' middleware
                                       like this we can add all routes according to schemas
                         2.common.js : This file contains the common function that we are using throught appication in each file.
                                       e.g. validation functions for fields and sending response to request 
                         3.dbConfig.js : This file contains the database connection
                                         create  a connection and store in global var so we can access it in any file 
                        4.swagger.js:

                   folders: 
                          1. utils : It is a way to group together reusable code 
                                config.js: config() method process of loading environment variables from a configuration file,so we can access it
                       
                          2.routes: store files that define the routes and associated handlers for different endpoints or URL paths.
                                    These route files are responsible for handling incoming requests and generating responses. 
                                    naming convention foefiles should be  camel case e.g. loginRoutes.js
                                    its also include swaagger api documentation as per request
 
                          3.controllers : Controllers are responsible for handling the business logic of your application and processing requests received from the routes.
                                          Inside each controller file, you define functions that correspond to the different operations or actions related to that domain entity.
                                          These functions are typically invoked by the route handlers defined in the "routes" files. 
                                           controller wil receive request from routes and will send response which is gets from service
                          4.services : Services are responsible for implementing specific business logic and performing operations that are not directly related to handling requests or interacting with the database.
                                       handle complex business logic, such as data manipulation, validation, or interaction with external APIs or services.
                                       They are often used by the controller modules to perform specific operations required by the application.
                          5.models :  the "models" folder is used to store model files.
                                       Models represent the structure and behavior of the application's data entities
                                       They typically define the schema, validation rules, and database interactions for a specific entity
        
   2.node_modules:

  
                       